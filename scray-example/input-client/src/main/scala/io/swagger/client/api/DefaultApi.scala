/**
 * ADAM API
 * An API to retrieve data about and the operation state of elevators and escalators at train stations run by DB Station&Service AG
 *
 * OpenAPI spec version: 1.0
 * Contact: dbopendata@deutschebahn.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * With manual updates to make it compatible with deployed api.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api

import io.swagger.client.model.Facility
import io.swagger.client.model.Station
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class DefaultApi(val defBasePath: String = "http://adam.noncd.db.de/api/v1.0",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * 
   * Access to the facilities known to the system
   * @param _type type of the facility to filter by (optional, default to [ESCALATOR, ELEVATOR])
   * @param state the state of the facility to filter by (optional, default to [ACTIVE, INACTIVE, UNKNOWN])
   * @return List[Facility]
   */
  def findFacilities: Option[List[Facility]] = {
    // create path and map variables
    val path = "/facilities".replaceAll("\\{format\\}","json")
    val contentTypes = List("application/json", "application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]  
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "array", classOf[Facility]).asInstanceOf[List[Facility]])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * Returns the railway station identified by stationnumber
   * @param stationnumber stationnumber of the station to fetch 
   * @return Station
   */
  def findStationByStationNumber (stationnumber: Long) : Option[Station] = {
    // create path and map variables
    val path = "/stations/{stationnumber}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "stationnumber" + "\\}",apiInvoker.escape(stationnumber))


    val contentTypes = List("application/json", "application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

        
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Station]).asInstanceOf[Station])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * Returns the facility identify by equipmentnumber
   * @param equipmentnumber equipmentnumber of the facility to fetch 
   * @return Facility
   */
  def getFacilityByEquipmentNumber (equipmentnumber: Long) : Option[Facility] = {
    // create path and map variables
    val path = "/facilities/{equipmentnumber}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "equipmentnumber" + "\\}",apiInvoker.escape(equipmentnumber))


    val contentTypes = List("application/json", "application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

        
    
    var postBody: AnyRef = null

    if(contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart()
      
      postBody = mp
    }
    else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Facility]).asInstanceOf[Facility])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
